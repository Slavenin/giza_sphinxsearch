defmodule Mix.Tasks.Giza.Sphinx.Config.Index do
  use Mix.Task

  @shortdoc "Append an index and source to your Sphinx configuration."

  @moduledoc """
  Append an index skeleton to your Sphinx Config. Very convenient!

  ## Example

      > mix giza.sphinx.config.index blog_post

      Added index i_blog_post and source source_blog_post to Config at sphinx/sphinx.conf. 
      Edit your SQL queries and attributes there and then run 'mix giza.sphinx.index rotate'.
  """

  def run([name]) do
    index_name  = "i_#{name}"
    source_name = "source_#{name}"

    sphinx_conf_addition = "\n\n# Generated by giza.sphinx.config.index #{name}\n" <>
      generate_index(name, index_name, source_name) <> "\n" <>
      generate_source(source_name) <> "\n"

    {:ok, file} = File.open "sphinx/sphinx.conf", [:append]

    _ = IO.binwrite file, sphinx_conf_addition

    _ = File.close file

    Mix.shell.info "Added index #{index_name} and source #{source_name} to Config at sphinx/sphinx.conf. "
      <> "Edit your SQL queries and attributes there and then run 'mix giza.sphinx.index rotate'"
  end

  def run(_) do
    Mix.shell.info "giza.sphinx.config.index requires one argument: the name of the new index"
  end

  defp generate_source(source_name) do
    ~s"""
    source #{source_name} : source1
    {
      sql_query = \\ 
        SELECT id, example_field, updated_at \\ 
        FROM example_table


      sql_field_string   = example_field
      sql_attr_timestamp = updated_at
    }
    """
  end

  defp generate_index(name, index_name, source_name) do
    ~s"""
    index #{index_name} : i_defaults
    {
      source = #{source_name}
      path = sphinx/data/#{name}
    }
    """
  end
end